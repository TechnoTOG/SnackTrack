<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SnackTrack</title>
    <link rel="icon" type="image/svg+xml" href="/assets/logos/SnackTrack_text.svg" >
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .bg-orange-400 {
            background-color: #ff9c2b; /* Orange */
        }

        .grid-layout {
            display: grid;
            grid-template-columns: 1fr 1fr; /* Two columns */
            grid-gap: 1.5rem; /* Gap between grid items */
        }

        .grid-item-2-3 {
            display: flex;
            flex-direction: column;
            gap: 1.5rem; /* Gap between stacked items */
        }
        .scrollable {
            overflow-y: auto;
        }

        .max-height-products {
            max-height: 400px; /* Adjust based on visible rows for Products */
        }

        .max-height-invoice {
            max-height: 200px; /* Adjust based on visible rows for Invoice */
        }
    </style>
</head>
<body>
    <header class="bg-orange-400 text-white py-4">
        <div class="container mx-auto flex justify-between items-center px-4">
            <a href="#" class="text-lg font-bold"><img src="/assets/logos/SnackTrack_logo_nbg.png" alt="SnackTrack" width="60" height="60"></a>
            <nav>
                <ul class="flex space-x-4">
                    <li><a href="#">Home</a></li>
                    <li><a href="#">Transactions</a></li>
                    <li><a href="#">Items</a></li>
                    <li><a href="#">About Us</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="container mx-auto mt-10">
        <h1 class="text-3xl font-bold w-full text-center ">Welcome to SnackTrack</h1>       
        <div class="grid-layout px-4">
            <!-- Product Table (1) -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-xl font-bold mb-4">Products</h2>
                <div id="product-table-container" class="bg-gray-100 rounded-lg p-4">
                    <table class="min-w-full" id="product-table">
                        <thead>
                            <tr>
                                <th class="px-4 py-2">Product</th>
                                <th class="px-4 py-2">Price</th>
                                <th class="px-4 py-2">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Dynamically generated rows for products -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Invoice/Cart and Sales Brief Tables (2, 3) -->
            <div class="grid-item-2-3">
                <!-- Invoice/Cart Table (2) -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <div class="relative flex items-center">
                        <!-- Text for SnackTrack -->
                        <h2 class="text-xl font-bold mb-4">Invoice/Cart</h2>
                        <!-- UPI VPA Icon (Clickable) -->
                        <img src="/assets/icons/upi_pay_24dp_6B7280_FILL0_wght500_GRAD0_opsz24.svg" alt="UPI VPA" class="absolute right-0 cursor-pointer" id="upi-icon">
                    </div>
                    <div id="invoice-table-container" class="bg-gray-100 rounded-lg p-4">
                        <table class="min-w-full" id="invoice-table">
                            <thead>
                                <tr>
                                    <th class="px-4 py-2">Product</th>
                                    <th class="px-4 py-2">Price</th>
                                    <th class="px-4 py-2">Quantity</th>
                                    <th class="px-4 py-2">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Dynamically generated rows for added products -->
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-4">
                        <p class="font-bold">Items: <span id="total-item">0</span></p>
                        <p class="font-bold pb-2">Total: ₹<span id="total-price">0.00</span></p>
                        <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">Generate QR</button>
                        <button class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg">Cash</button>
                    </div>
                </div>

                <!-- Sales Brief Table (3) -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-xl font-bold mb-4">Sales Brief</h2>
                    <div class="bg-gray-100 rounded-lg p-4">
                        <p class="font-bold">Income Generated: ₹<span id="total-income">0.00</span></p>
                        <p class="font-bold">Total Products Sold: <span id="total-products-sold">0</span></p>
                        <p class="font-bold">Total Transactions Made: <span id="total-transactions">0</span></p>
                        <p class="font-bold">Pending Transactions: <span id="pending-transactions">0</span></p>
                        <div class="mt-2">
                            <h3 class="font-semibold">Payment Method Breakdown:</h3>
                            <p>Cash: <span id="cash-count">0</span></p>
                            <p>UPI: <span id="upi-count">0</span></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Modal Popup for UPI VPA -->
        <div id="upi-modal" class="hidden fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center">
            <div class="bg-white p-6 rounded-lg shadow-lg w-96">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold">Enter UPI Virtual Address</h3>
                    <button id="close-modal" class="text-xl font-bold">×</button>
                </div>
                <input type="text" id="upi-input" class="border px-4 py-2 w-full mb-4" placeholder="Enter UPI VPA">
                <div class="flex justify-end space-x-4">
                    <button id="cancel-btn" class="bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">Cancel</button>
                    <button id="save-btn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Save</button>
                </div>
            </div>
        </div>
        <!-- Modal Popup for Customer Details and QR -->
        <div id="qr-modal" class="hidden fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center">
            <div class="bg-white p-6 rounded-lg shadow-lg w-96" id="qr-frame">
                <div id="customer-details-section">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-xl font-bold">Enter Customer Details</h3>
                        <button id="qclose-modal" class="text-xl font-bold">×</button>
                    </div>
                    <p class="text-base">Customer Name</p>
                    <input type="text" id="customer-name" class="border px-4 py-2 w-full mb-4" placeholder="Enter Customer Name">
                    <p class="text-base">Customer Mobile</p>
                    <input type="text" id="customer-mobile" class="border px-4 py-2 w-full mb-4" placeholder="Enter Mobile Number">
                    <div class="flex justify-end space-x-4">
                        <button id="qcancel-btn" class="bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">Cancel</button>
                        <button id="qnext-btn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Next</button>
                    </div>
                </div>
                <div id="qr-display-section" class="hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-xl font-bold">Scan QR Code</h3>
                        <button id="close-modal-qr" class="text-xl font-bold">×</button>
                    </div>
                    <div class="flex">
                        <div id="qr-code-container" class="flex justify-center items-center mb-4 mr-4">
                            <!-- QR Code Image will be inserted dynamically -->
                            <img id="qr-code-image" class="w-48 h-48" src="" alt="QR Code">
                        </div>
                        <div id="cart-items-section" class="bg-gray-100 rounded-lg p-4">
                            <h4 class="font-bold">Cart Items:</h4>
                            <table class="min-w-full border-collapse border border-gray-300">
                                <thead>
                                    <tr>
                                        <th class="border border-gray-300 px-4 py-2">Item</th>
                                        <th class="border border-gray-300 px-4 py-2">Quantity</th>
                                    </tr>
                                </thead>
                                <tbody id="cart-items-list">
                                    <!-- Cart items will be dynamically inserted here -->
                                </tbody>
                            </table>
                            <p class="font-bold mt-2">Transaction ID: <span id="trans-id">null</span></p>
                            <p class="font-bold mt-2">Total: ₹<span id="qr-total-price">0.00</span></p>
                        </div>
                    </div>
                    <div class="flex justify-end space-x-4">
                        <button id="complete-btn" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded mt-3">Complete</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Modal Popup for Cash Payment -->
        <div id="cash-modal" class="hidden fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center">
            <div class="bg-white p-6 rounded-lg shadow-lg w-96">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold">Cash Payment</h3>
                    <button id="close-cash-modal" class="text-xl font-bold">×</button>
                </div>
                <div id="cash-customer-details">
                    <p class="text-base">Customer Name</p>
                    <input type="text" id="customer-name-cash" class="border px-4 py-2 w-full mb-4" placeholder="Enter Customer Name">
                    <p class="text-base">Amount Received</p>
                    <input type="number" id="amount-received" class="border px-4 py-2 w-full mb-4" placeholder="Enter Amount Received">
                    <div class="flex justify-end space-x-4">
                        <button id="cancel-cash-btn" class="bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">Cancel</button>
                        <button id="next-cash-btn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Next</button>
                    </div>
                    <div id="cash-error-message" class="text-red-500 text-sm mt-2"></div>
                </div>
                <div id="cash-summary" class="hidden mt-4">
                    <div class="bg-gray-100 rounded-lg p-4">
                        <h4 class="font-bold">Invoice Summary:</h4>
                        <table class="min-w-full border-collapse border border-gray-300 mt-2">
                            <thead>
                                <tr>
                                    <th class="border border-gray-300 px-4 py-2">Item</th>
                                    <th class="border border-gray-300 px-4 py-2">Quantity</th>
                                    <th class="border border-gray-300 px-4 py-2">Price</th>
                                </tr>
                            </thead>
                            <tbody id="cash-items-list">
                                <!-- Items will be dynamically inserted here -->
                            </tbody>
                        </table>
                    </div>
                    <p class="font-bold mt-2">Transaction ID: <span id="cash-trans-id">null</span></p>
                    <p class="font-bold">Total: ₹<span id="cash-total-price">0.00</span></p>
                    <p class="font-bold text-green-500">Amount Received: ₹<span id="cash-amount-received">0.00</span></p>
                    <p class="font-bold text-red-500">Balance: ₹<span id="cash-balance">0.00</span></p>
                    <div class="flex justify-end space-x-4">
                        <button id="cancel-cash-btn-summary" class="bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">Cancel</button>
                        <button id="confirm-cash-btn" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Complete</button>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <footer class="bg-orange-400 text-white py-4 mt-10">
        <div class="container mx-auto text-center">
            <p>&copy; 2025 SnackTrack. All rights reserved.</p>
        </div>
    </footer>
</body>
<script>
    // An array to track the products added to the invoice
    let invoiceItems = [];
    var mongoID;

    async function fetchProducts() {
        try {
            const response = await fetch('http://localhost:3000/api/products');
            const products = await response.json();

            const productTableBody = document.querySelector('#product-table tbody');
            productTableBody.innerHTML = ''; // Clear existing rows

            products.forEach(product => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="border px-4 py-2">${product.name}</td>
                    <td class="border px-4 py-2">₹${product.price.toFixed(2)}</td>
                    <td class="border px-4 py-2">
                        <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded" onclick="addToInvoice('${product._id}', '${product.name}', ${product.price})">Add</button>
                    </td>
                `;
                productTableBody.appendChild(row);
            });

            applyScrollPane("product-table", "product-table-container", 14);
        } catch (error) {
            console.error('Error fetching products:', error);
        }
    }

    // Add the product to the invoice or update its quantity if already added
    function addToInvoice(productId, productName, productPrice) {
        // Check if the product is already in the invoice
        const existingItem = invoiceItems.find(item => item.productId === productId);

        if (existingItem) {
            // If already in the invoice, increase the quantity
            existingItem.quantity += 1;
        } else {
            // If not in the invoice, add a new entry
            invoiceItems.push({
                productId,
                productName,
                price: productPrice,
                quantity: 1
            });
        }

        // Re-render the invoice table
        renderInvoice();
    }

    // Render the invoice table and calculate the total
    function renderInvoice() {
        const invoiceTableBody = document.querySelector('#invoice-table tbody');
        invoiceTableBody.innerHTML = ''; // Clear existing rows

        let total = 0;
        let totalItems = 0;

        // Iterate over the invoiceItems to generate the table rows
        invoiceItems.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td class="border px-4 py-2">${item.productName}</td>
                <td class="border px-4 py-2">₹${item.price.toFixed(2)}</td>
                <td class="border px-4 py-2">${item.quantity}</td>
                <td class="border px-4 py-2">
                    <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 rounded" onclick="removeFromInvoice('${item.productId}')">Remove</button>
                </td>
            `;
            invoiceTableBody.appendChild(row);

            // Update total and item count
            total += item.price * item.quantity;
            totalItems += item.quantity;
        });

        // Update total price and total items count
        document.querySelector('#total-item').textContent = totalItems;
        document.querySelector('#total-price').textContent = total.toFixed(2);
        // document.querySelector('#total-products-sold').textContent = totalItems;
    }

    // Remove a product from the invoice
    function removeFromInvoice(productId) {
        const itemIndex = invoiceItems.findIndex(item => item.productId === productId);
        if (itemIndex > -1) {
            invoiceItems.splice(itemIndex, 1); // Remove the product from the array
            renderInvoice(); // Re-render the invoice table
        }
    }

    // Fetch products on page load
    fetchProducts();

    function applyScrollPane(tableId, containerId, maxRows) {
        const table = document.getElementById(tableId);
        const container = document.getElementById(containerId);
        const rowCount = table.querySelector("tbody").rows.length;

        if (rowCount > maxRows) {
            container.classList.add("scrollable");
            container.style.maxHeight = maxRows === 14 ? "695px" : "300px"; // Adjust max height for Products or Invoice
        } else {
            container.classList.remove("scrollable");
            container.style.maxHeight = "unset";
        }
    }

    // Apply scroll pane for Products and Invoice tables
    applyScrollPane("product-table", "product-table-container", 14);
    applyScrollPane("invoice-table", "invoice-table-container", 5);

    // Optionally reapply when rows are dynamically added/removed
    // Get references to elements
    const upiIcon = document.getElementById('upi-icon');
    const upiModal = document.getElementById('upi-modal');
    const closeModal = document.getElementById('close-modal');
    const cancelBtn = document.getElementById('cancel-btn');
    const saveBtn = document.getElementById('save-btn');
    const upiInput = document.getElementById('upi-input');
    const errorMessage = document.createElement('p'); // Error message element

    // Add styles for error message
    errorMessage.style.color = 'red';
    errorMessage.style.fontSize = '0.875rem';
    errorMessage.style.marginTop = '5px';

    cancelBtn.disabled = true;
    closeModal.disabled = true;

    // Show the UPI modal when the icon is clicked
    upiIcon.addEventListener('click', () => {
        // Retrieve UPI VPA from session storage if available
        const savedVpa = sessionStorage.getItem('upiVpa');
        if (savedVpa) {
            upiInput.value = savedVpa; // Populate the input field with the saved value
        } else {
            upiInput.value = ''; // Clear the field if no VPA is saved
        }
        upiModal.classList.remove('hidden'); // Show the modal
    });

    // Close the modal when the close button (×) is clicked
    closeModal.addEventListener('click', () => {
        upiModal.classList.add('hidden'); // Hide the modal
        errorMessage.remove(); // Remove error message when closing the modal
    });

    // Close the modal when the Cancel button is clicked
    cancelBtn.addEventListener('click', () => {
        upiModal.classList.add('hidden'); // Hide the modal
        errorMessage.remove(); // Remove error message when cancelling
    });

    // Check if UPI VPA exists in session storage on page load
    window.onload = () => {
        const savedVpa = sessionStorage.getItem('upiVpa');
        if (!savedVpa) {
            // Show the UPI modal if no VPA is saved
            upiModal.classList.remove('hidden');
        }else{
            cancelBtn.disabled = false;
            closeModal.disabled = false;
        }
    };

    // Save the UPI VPA to sessionStorage and close the modal
    saveBtn.addEventListener('click', () => {
        const upiVpa = upiInput.value.trim();

        // Remove any previous error message before validating
        errorMessage.remove();

        if (upiVpa) {
            // Validate that the UPI VPA contains '@'
            if (upiVpa.includes('@')) {
                cancelBtn.disabled = false;
                closeModal.disabled = false;
                sessionStorage.setItem('upiVpa', upiVpa); // Save the UPI VPA to sessionStorage
                upiModal.classList.add('hidden'); // Hide the modal
            } else {
                // Show error message if the validation fails
                errorMessage.textContent = 'Please enter a valid UPI VPA (must contain "@")';
                upiInput.after(errorMessage); // Append error message after the input field
            }
        } else {
            // Show error message if the input is empty
            errorMessage.textContent = 'UPI VPA cannot be empty.';
            upiInput.after(errorMessage); // Append error message after the input field
        }
    });

    // References to modal and elements
    const qrModal = document.getElementById('qr-modal');
    const customerDetailsSection = document.getElementById('customer-details-section');
    const qrDisplaySection = document.getElementById('qr-display-section');
    const qcloseModal = document.getElementById('qclose-modal');
    const closeModalQR = document.getElementById('close-modal-qr');
    const qcancelBtn = document.getElementById('qcancel-btn');
    const qnextBtn = document.getElementById('qnext-btn');
    const completeBtn = document.getElementById('complete-btn');
    const customerNameInput = document.getElementById('customer-name');
    const customerMobileInput = document.getElementById('customer-mobile');
    const qrCodeImage = document.getElementById('qr-code-image');
    const genQRerrorMessage = document.createElement('p'); // Error message element

    // Add styles for error message
    genQRerrorMessage.style.color = 'red';
    genQRerrorMessage.style.fontSize = '0.875rem';
    genQRerrorMessage.style.marginTop = '5px';

    // Show the modal when Generate QR button is clicked
    document.querySelector('.bg-blue-500').addEventListener('click', () => {
        if(document.querySelector('#total-item').textContent > 0){
            qrModal.classList.remove('hidden');
            customerDetailsSection.classList.remove('hidden');
            qrDisplaySection.classList.add('hidden');
        }
    });

    // Close modal
    function closeModalHandler() {
        qrModal.classList.add('hidden');
        genQRerrorMessage.remove();
        customerNameInput.value = '';
        customerMobileInput.value = '';
        qrCodeImage.src = '';
        const element = document.getElementById('qr-frame');
        element.classList.add('w-96');
        fetchSalesBrief();
    }
    qcloseModal.addEventListener('click', closeModalHandler);
    closeModalQR.addEventListener('click', closeModalHandler);
    qcancelBtn.addEventListener('click', closeModalHandler);

    function generateTransactionID() {
        const now = new Date();

        // Get individual date and time components
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0'); // Month is 0-indexed
        const day = String(now.getDate()).padStart(2, '0');
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');

        // Concatenate the components to form the ID
        return `${year}${month}${day}${hours}${minutes}${seconds}`;
    }

    // Handle Next Button Click
    qnextBtn.addEventListener('click', async () => {
        const savedVpa = sessionStorage.getItem('upiVpa');
        const amt = document.querySelector('#total-price').textContent;
        const transactionID = generateTransactionID();
        const customerName = customerNameInput.value.trim();
        const customerMobile = customerMobileInput.value.trim();
        const itemcnt = document.querySelector('#total-item').textContent;

        // Validate inputs
        if (!customerName || !customerMobile) {
            // Show error message if the validation fails
            genQRerrorMessage.textContent = 'Please fill all the fields';
            customerMobileInput.after(genQRerrorMessage); // Append error message after the input field
            return;
        }

        try {
            // Collect items from the invoice/cart
            const items = invoiceItems.map(item => ({
                name: item.productName,
                quantity: item.quantity
            }));

            // Send POST request to /api/gen-qr
            const response = await fetch('/api/gen-qr', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    upi_id: savedVpa,
                    amt: amt,
                    tran_id: transactionID,
                    items: items,
                    custname: customerName, 
                    custmobile: customerMobile,
                    itemcnt: itemcnt
                }),
            });

            if (!response.ok) throw new Error('Failed to generate QR code.');
            genQRerrorMessage.remove();

            const data = await response.json();

            const element = document.getElementById('qr-frame');
            element.classList.remove('w-96');

            // Update UI with QR code
            qrCodeImage.src = `${data.qrCode}`;
            mongoID = data.mongotransactionId;

            // Populate cart items in the table
            const cartItemsList = document.getElementById('cart-items-list');
            cartItemsList.innerHTML = ''; // Clear previous items
            items.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="border border-gray-300 px-4 py-2">${item.name}</td>
                    <td class="border border-gray-300 px-4 py-2">${item.quantity}</td>
                `;
                cartItemsList.appendChild(row);
            });

            // Set total price
            document.getElementById('qr-total-price').textContent = amt;
            document.getElementById('trans-id').textContent = transactionID;

            customerDetailsSection.classList.add('hidden');
            qrDisplaySection.classList.remove('hidden');
        } catch (error) {
            console.error('An error occurred while generating the QR code.',error);
        }
    });

    // Handle Complete Button Click
    completeBtn.addEventListener('click', async () => {
        try {
            // Send POST request to /api/complete-transaction
            const response = await fetch('/api/complete-transaction', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({mongoID: mongoID}),
            });

            if (!response.ok) throw new Error('Failed to complete the transaction.');

            // Clear the invoice/cart table
            const cartTableBody = document.querySelector('#invoice-table tbody'); // Select the table body
            if (cartTableBody) {
                cartTableBody.innerHTML = ''; // Clear all rows
            }

            const element = document.getElementById('qr-frame');
            element.classList.add('w-96');

            // Reset the total items and price
            document.getElementById('total-item').textContent = '0'; // Update total items to 0
            document.getElementById('total-price').textContent = '0.00'; // Update total price to ₹0.00

            closeModalHandler(); // Close the modal
            fetchSalesBrief(); // Refresh Sales Brief
        } catch (error) {
            console.error('An error occurred while completing the transaction.',error);
        }
    });

    // Fetch sales brief data from the server and update the dashboard
    async function fetchSalesBrief() {
        try {
            const response = await fetch('/api/sales-brief');
            if (!response.ok) {
                throw new Error('Failed to fetch sales brief data');
            }

            const salesData = await response.json();

            // Update the UI with the fetched sales data
            document.getElementById('total-income').textContent = `${salesData.totalIncome.toFixed(2)}`;
            document.getElementById('total-products-sold').textContent = salesData.totalProductsSold;
            document.getElementById('total-transactions').textContent = salesData.totalTransactions;
            document.getElementById('pending-transactions').textContent = salesData.pendingTransactions;
            document.getElementById('cash-count').textContent = salesData.totalCashTransactions;
            document.getElementById('upi-count').textContent = salesData.totalUPITransactions;

        } catch (error) {
            console.error('An error occurred while fetching sales brief data:', error);
        }
    }

    // Call the function on page load to initialize the dashboard
    window.onload = () => {
        fetchSalesBrief();
    };

    // Get references to the cash modal and its elements
    const cashModal = document.getElementById('cash-modal');
    const closeCashModal = document.getElementById('close-cash-modal');
    const cancelCashBtn = document.getElementById('cancel-cash-btn');
    const nextCashBtn = document.getElementById('next-cash-btn');
    const customerNameCashInput = document.getElementById('customer-name-cash');
    const amountReceivedInput = document.getElementById('amount-received');
    const cashSummary = document.getElementById('cash-summary');
    const transactionID = generateTransactionID();
    const cashCustomerDetails = document.getElementById('cash-customer-details');
    const cashItemsList = document.getElementById('cash-items-list');
    const cashTotalPrice = document.getElementById('cash-total-price');
    const cashAmountReceived = document.getElementById('cash-amount-received');
    const cashBalance = document.getElementById('cash-balance');
    const cashErrorMessage = document.getElementById('cash-error-message');

    // Show the cash modal when the Cash button is clicked
    document.querySelector('.bg-green-500').addEventListener('click', () => {
        if(document.querySelector('#total-item').textContent > 0){
            cashModal.classList.remove('hidden');
        }
    });

    // Close the cash modal
    function closeCashModalHandler() {
        cashModal.classList.add('hidden');
        customerNameCashInput.value = '';
        amountReceivedInput.value = '';
        cashSummary.classList.add('hidden');
        cashCustomerDetails.classList.remove('hidden');
        cashItemsList.innerHTML = ''; // Clear previous items
        cashErrorMessage.textContent = ''; // Clear error message
    }

    // Close modal when the close button (×) is clicked
    closeCashModal.addEventListener('click', closeCashModalHandler);

    // Close modal when the Cancel button is clicked
    cancelCashBtn.addEventListener('click', closeCashModalHandler);

    // Handle Next Button Click
    nextCashBtn.addEventListener('click', () => {
        const customerName = customerNameCashInput.value.trim();
        const amountReceived = parseFloat(amountReceivedInput.value.trim());

        // Clear previous error message
        cashErrorMessage.textContent = '';

        // Validate inputs
        if (!customerName || isNaN(amountReceived) || amountReceived <= 0) {
            cashErrorMessage.textContent = 'Please fill all the fields correctly.';
            return;
        }

        // Show the summary section
        cashCustomerDetails.classList.add('hidden');
        cashSummary.classList.remove('hidden');
        document.getElementById('cash-trans-id').textContent = transactionID;
        cashAmountReceived.textContent = amountReceived.toFixed(2);

        // Populate the invoice items in the cash summary
        cashItemsList.innerHTML = ''; // Clear previous items
        let total = 0;

        invoiceItems.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td class="border border-gray-300 px-4 py-2">${item.productName}</td>
                <td class="border border-gray-300 px-4 py-2">${item.quantity}</td>
                <td class="border border-gray-300 px-4 py-2">₹${(item.price * item.quantity).toFixed(2)}</td>
            `;
            cashItemsList.appendChild(row);
            total += item.price * item.quantity;
        });

        cashTotalPrice.textContent = total.toFixed(2);
        cashBalance.textContent = (amountReceived - total).toFixed(2);
    });

    // Handle Confirm Button Click
    document.getElementById('confirm-cash-btn').addEventListener('click', async () => {
        // Logic to handle the confirmation of the cash payment
        // This could involve sending the payment details to the server
        closeCashModalHandler(); // Close the modal after confirmation
    });

    // Handle Cancel Button in Summary
    document.getElementById('cancel-cash-btn-summary').addEventListener('click', closeCashModalHandler);
</script>
</html>